// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestingSystem.proto

#ifndef PROTOBUF_TestingSystem_2eproto__INCLUDED
#define PROTOBUF_TestingSystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TestingSystem {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestingSystem_2eproto();
void protobuf_AssignDesc_TestingSystem_2eproto();
void protobuf_ShutdownFile_TestingSystem_2eproto();

class question_msg;
class answer_msg;
class student_msg;
class group_msg;
class subject_msg;
class result_msg;

// ===================================================================

class question_msg : public ::google::protobuf::Message {
 public:
  question_msg();
  virtual ~question_msg();

  question_msg(const question_msg& from);

  inline question_msg& operator=(const question_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_msg& default_instance();

  void Swap(question_msg* other);

  // implements Message ----------------------------------------------

  question_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_msg& from);
  void MergeFrom(const question_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:TestingSystem.question_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* body_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TestingSystem_2eproto();
  friend void protobuf_AssignDesc_TestingSystem_2eproto();
  friend void protobuf_ShutdownFile_TestingSystem_2eproto();

  void InitAsDefaultInstance();
  static question_msg* default_instance_;
};
// -------------------------------------------------------------------

class answer_msg : public ::google::protobuf::Message {
 public:
  answer_msg();
  virtual ~answer_msg();

  answer_msg(const answer_msg& from);

  inline answer_msg& operator=(const answer_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const answer_msg& default_instance();

  void Swap(answer_msg* other);

  // implements Message ----------------------------------------------

  answer_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const answer_msg& from);
  void MergeFrom(const answer_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // required int32 correct = 4;
  inline bool has_correct() const;
  inline void clear_correct();
  static const int kCorrectFieldNumber = 4;
  inline ::google::protobuf::int32 correct() const;
  inline void set_correct(::google::protobuf::int32 value);

  // required int32 q_id = 3;
  inline bool has_q_id() const;
  inline void clear_q_id();
  static const int kQIdFieldNumber = 3;
  inline ::google::protobuf::int32 q_id() const;
  inline void set_q_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestingSystem.answer_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_correct();
  inline void clear_has_correct();
  inline void set_has_q_id();
  inline void clear_has_q_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* body_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 correct_;
  ::google::protobuf::int32 q_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TestingSystem_2eproto();
  friend void protobuf_AssignDesc_TestingSystem_2eproto();
  friend void protobuf_ShutdownFile_TestingSystem_2eproto();

  void InitAsDefaultInstance();
  static answer_msg* default_instance_;
};
// -------------------------------------------------------------------

class student_msg : public ::google::protobuf::Message {
 public:
  student_msg();
  virtual ~student_msg();

  student_msg(const student_msg& from);

  inline student_msg& operator=(const student_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const student_msg& default_instance();

  void Swap(student_msg* other);

  // implements Message ----------------------------------------------

  student_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const student_msg& from);
  void MergeFrom(const student_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 course = 3;
  inline bool has_course() const;
  inline void clear_course();
  static const int kCourseFieldNumber = 3;
  inline ::google::protobuf::int32 course() const;
  inline void set_course(::google::protobuf::int32 value);

  // required int32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestingSystem.student_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_course();
  inline void clear_has_course();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 course_;
  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TestingSystem_2eproto();
  friend void protobuf_AssignDesc_TestingSystem_2eproto();
  friend void protobuf_ShutdownFile_TestingSystem_2eproto();

  void InitAsDefaultInstance();
  static student_msg* default_instance_;
};
// -------------------------------------------------------------------

class group_msg : public ::google::protobuf::Message {
 public:
  group_msg();
  virtual ~group_msg();

  group_msg(const group_msg& from);

  inline group_msg& operator=(const group_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_msg& default_instance();

  void Swap(group_msg* other);

  // implements Message ----------------------------------------------

  group_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const group_msg& from);
  void MergeFrom(const group_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TestingSystem.group_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TestingSystem_2eproto();
  friend void protobuf_AssignDesc_TestingSystem_2eproto();
  friend void protobuf_ShutdownFile_TestingSystem_2eproto();

  void InitAsDefaultInstance();
  static group_msg* default_instance_;
};
// -------------------------------------------------------------------

class subject_msg : public ::google::protobuf::Message {
 public:
  subject_msg();
  virtual ~subject_msg();

  subject_msg(const subject_msg& from);

  inline subject_msg& operator=(const subject_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const subject_msg& default_instance();

  void Swap(subject_msg* other);

  // implements Message ----------------------------------------------

  subject_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const subject_msg& from);
  void MergeFrom(const subject_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 proffesor_id = 3;
  inline bool has_proffesor_id() const;
  inline void clear_proffesor_id();
  static const int kProffesorIdFieldNumber = 3;
  inline ::google::protobuf::int32 proffesor_id() const;
  inline void set_proffesor_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestingSystem.subject_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_proffesor_id();
  inline void clear_has_proffesor_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 proffesor_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TestingSystem_2eproto();
  friend void protobuf_AssignDesc_TestingSystem_2eproto();
  friend void protobuf_ShutdownFile_TestingSystem_2eproto();

  void InitAsDefaultInstance();
  static subject_msg* default_instance_;
};
// -------------------------------------------------------------------

class result_msg : public ::google::protobuf::Message {
 public:
  result_msg();
  virtual ~result_msg();

  result_msg(const result_msg& from);

  inline result_msg& operator=(const result_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const result_msg& default_instance();

  void Swap(result_msg* other);

  // implements Message ----------------------------------------------

  result_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const result_msg& from);
  void MergeFrom(const result_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mark = 2;
  inline bool has_mark() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 2;
  inline ::google::protobuf::int32 mark() const;
  inline void set_mark(::google::protobuf::int32 value);

  // required int32 points = 3;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 group_id = 5;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 5;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestingSystem.result_msg)
 private:
  inline void set_has_mark();
  inline void clear_has_mark();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mark_;
  ::google::protobuf::int32 points_;
  ::std::string* name_;
  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TestingSystem_2eproto();
  friend void protobuf_AssignDesc_TestingSystem_2eproto();
  friend void protobuf_ShutdownFile_TestingSystem_2eproto();

  void InitAsDefaultInstance();
  static result_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// question_msg

// required int32 id = 1;
inline bool question_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_msg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 question_msg::id() const {
  return id_;
}
inline void question_msg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string title = 2;
inline bool question_msg::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void question_msg::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void question_msg::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void question_msg::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& question_msg::title() const {
  return *title_;
}
inline void question_msg::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void question_msg::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void question_msg::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* question_msg::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* question_msg::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void question_msg::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string body = 3;
inline bool question_msg::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void question_msg::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void question_msg::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void question_msg::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& question_msg::body() const {
  return *body_;
}
inline void question_msg::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void question_msg::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void question_msg::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* question_msg::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* question_msg::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void question_msg::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// answer_msg

// required int32 id = 1;
inline bool answer_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void answer_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void answer_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void answer_msg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 answer_msg::id() const {
  return id_;
}
inline void answer_msg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string body = 2;
inline bool answer_msg::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void answer_msg::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void answer_msg::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void answer_msg::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& answer_msg::body() const {
  return *body_;
}
inline void answer_msg::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void answer_msg::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void answer_msg::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* answer_msg::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* answer_msg::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void answer_msg::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 correct = 4;
inline bool answer_msg::has_correct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void answer_msg::set_has_correct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void answer_msg::clear_has_correct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void answer_msg::clear_correct() {
  correct_ = 0;
  clear_has_correct();
}
inline ::google::protobuf::int32 answer_msg::correct() const {
  return correct_;
}
inline void answer_msg::set_correct(::google::protobuf::int32 value) {
  set_has_correct();
  correct_ = value;
}

// required int32 q_id = 3;
inline bool answer_msg::has_q_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void answer_msg::set_has_q_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void answer_msg::clear_has_q_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void answer_msg::clear_q_id() {
  q_id_ = 0;
  clear_has_q_id();
}
inline ::google::protobuf::int32 answer_msg::q_id() const {
  return q_id_;
}
inline void answer_msg::set_q_id(::google::protobuf::int32 value) {
  set_has_q_id();
  q_id_ = value;
}

// -------------------------------------------------------------------

// student_msg

// required int32 id = 1;
inline bool student_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void student_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void student_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void student_msg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 student_msg::id() const {
  return id_;
}
inline void student_msg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool student_msg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void student_msg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void student_msg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void student_msg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& student_msg::name() const {
  return *name_;
}
inline void student_msg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void student_msg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void student_msg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* student_msg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* student_msg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void student_msg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 course = 3;
inline bool student_msg::has_course() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void student_msg::set_has_course() {
  _has_bits_[0] |= 0x00000004u;
}
inline void student_msg::clear_has_course() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void student_msg::clear_course() {
  course_ = 0;
  clear_has_course();
}
inline ::google::protobuf::int32 student_msg::course() const {
  return course_;
}
inline void student_msg::set_course(::google::protobuf::int32 value) {
  set_has_course();
  course_ = value;
}

// required int32 group_id = 4;
inline bool student_msg::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void student_msg::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void student_msg::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void student_msg::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 student_msg::group_id() const {
  return group_id_;
}
inline void student_msg::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// group_msg

// required int32 id = 1;
inline bool group_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_msg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 group_msg::id() const {
  return id_;
}
inline void group_msg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool group_msg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void group_msg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void group_msg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void group_msg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& group_msg::name() const {
  return *name_;
}
inline void group_msg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void group_msg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void group_msg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* group_msg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* group_msg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void group_msg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// subject_msg

// required int32 id = 1;
inline bool subject_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void subject_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void subject_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void subject_msg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 subject_msg::id() const {
  return id_;
}
inline void subject_msg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool subject_msg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void subject_msg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void subject_msg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void subject_msg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& subject_msg::name() const {
  return *name_;
}
inline void subject_msg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void subject_msg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void subject_msg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* subject_msg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* subject_msg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void subject_msg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 proffesor_id = 3;
inline bool subject_msg::has_proffesor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void subject_msg::set_has_proffesor_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void subject_msg::clear_has_proffesor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void subject_msg::clear_proffesor_id() {
  proffesor_id_ = 0;
  clear_has_proffesor_id();
}
inline ::google::protobuf::int32 subject_msg::proffesor_id() const {
  return proffesor_id_;
}
inline void subject_msg::set_proffesor_id(::google::protobuf::int32 value) {
  set_has_proffesor_id();
  proffesor_id_ = value;
}

// -------------------------------------------------------------------

// result_msg

// required int32 mark = 2;
inline bool result_msg::has_mark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void result_msg::set_has_mark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void result_msg::clear_has_mark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void result_msg::clear_mark() {
  mark_ = 0;
  clear_has_mark();
}
inline ::google::protobuf::int32 result_msg::mark() const {
  return mark_;
}
inline void result_msg::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
}

// required int32 points = 3;
inline bool result_msg::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void result_msg::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void result_msg::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void result_msg::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 result_msg::points() const {
  return points_;
}
inline void result_msg::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// required string name = 4;
inline bool result_msg::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void result_msg::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void result_msg::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void result_msg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& result_msg::name() const {
  return *name_;
}
inline void result_msg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void result_msg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void result_msg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* result_msg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* result_msg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void result_msg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 group_id = 5;
inline bool result_msg::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void result_msg::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void result_msg::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void result_msg::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 result_msg::group_id() const {
  return group_id_;
}
inline void result_msg::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestingSystem

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestingSystem_2eproto__INCLUDED
